<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd" https="false">
  <meta>
    <author>Chris Chua</author>
    <description></description>
    <documentationURL></documentationURL>
    <sampleQuery>select * from {table} where q='earthquake';</sampleQuery>
  </meta>
  <bindings>
    <select itemPath="" produces="XML">
      <urls>
        <url></url>
      </urls>
      <inputs>
        <key id="q" type="xs:string" paramType="query" required="true"/>
      </inputs>
      <execute><![CDATA[
        var parents = {}, allids = [];
        var children = {};
        var type;
        var toget = [], results = <results><results></results></results>;

        // Store in array to facilitate sorting
        var tweets = {};
        var aTweet;

        var query = null;
        // use 'trim_user' later with my own open data table

        query = y.query("use 'http://www.datatables.org/twitter/twitter.search.xml';" +
          "use 'http://www.datatables.org/twitter/twitter.status.xml';" +
          "select * from twitter.status where id in (select id_str from twitter.search where q=@q);",{q:q});

        var relatedId, aId;
        // Loop through to find the reply ids
        for each(var stat in query.results.status) {
          aTweet = wrapTweet(stat);
          aId = stat.id.toString();
          if (relatedId = stat.in_reply_to_status_id.toString()) {
            aTweet.parent = <parent>{relatedId}</parent>;
            aTweet.type = "reply";

            // If not already retrieved, add to toget
            if (allids.indexOf(relatedId) == -1) {
              toget.push(relatedId);
            }

            // Initialize array
            children[relatedId] || (children[relatedId] = []);
            children[relatedId].push(aId);
          }
          // Test for retweets?

          // Push it to a list of tweets
          tweets[aId] = aTweet;
          allids.push(aId);
        }

        // Add this to the list of results
        // results.results += query.results;

        // loop through and get every relevant node in conversation thread
        while(toget.length > 0) {
          query = y.query(
            "use 'http://www.datatables.org/twitter/twitter.status.xml';" +
            "select * from twitter.status where id in (@ids);",{ids: toget});

          toget = [];

          // Add reply to ids
          for each(var stat in query.results.status) {
            aTweet = wrapTweet(stat);
            aId = stat.id.toString();
            // not sure whether this is needed
            if (relatedId = stat.in_reply_to_status_id.toString()) {
              aTweet.parent = <parent>{relatedId}</parent>;
              aTweet.type = "reply";
              // If not already retrieved, add to toget
              if (allids.indexOf(relatedId) == -1) {
                toget.push(relatedId);
              }

              // Initialize array
              children[relatedId] || (children[relatedId] = []);
              children[relatedId].push(aId);
            }

            // Push it to list of tweets
            tweets[aId] = aTweet;
            allids.push(aId);
          }
        }

        // loop through to get all the retweets
        /*
        if (stat.retweet_count > 0) {
        }

        query = y.query("select * from twitter.status where id=@id;",{id:id});
        */

        // sort before returning

        // store an array of ids. sort the ids. then insert in order into an xmllist

        allids.sort();
        var i;
        for (i = 0; i < allids.length; i++) {
          // add children info
          children[allids[i]] && (tweets[allids[i]].children = <children>{children[allids[i]]}</children>);
          results.results.tweet += tweets[allids[i]];
        }

        response.object = results;

        function wrapTweet(s) {
          var tweetObj = <tweet><id>{s.id.toString()}</id><data>{s.*}</data><parent></parent><children></children><type></type></tweet>;
          return tweetObj;
        }
        ]]></execute>
    </select>
  </bindings>
</table>
